<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd"
	default-lazy-init="true">
	   
	<!-- 使用spring自带的占位符替换功能 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!-- 允许JVM参数覆盖 -->
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
		<!-- 忽略没有找到的资源文件 -->
		<property name="ignoreResourceNotFound" value="true"/>
		<!-- 配置资源文件 -->
		<property name="locations">
			<list>
				<value>classpath:JDBC.properties</value>
				<value>classpath:freemarker.properties</value>
				<value>classpath:config.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- 自动扫描包 -->
	<context:component-scan base-package="com.programs,framework">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<!-- 定义数据源 -->
	<bean id="dataSource"  class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<!--数据库驱动 -->
		<property name="driverClass" value="${jdbc.driver}" />
		<!--相应驱动的jdbcUrl -->
		<property name="jdbcUrl" value="${jdbc.url}" />
		<!--数据库的用户名 -->
		<property name="user" value="${jdbc.username}" />
		<!--数据库的密码 -->
		<property name="password" value="${jdbc.password}" />
		<!--初始化时获取连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<property name="initialPoolSize" value="${connection_pools.initial_pool_size}" />
		<!--连接池中保留的最小连接数-->
		<property name="minPoolSize" value="${connection_pools.min_pool_size}" />
		<!--连接池中保留的最大连接数 -->
		<property name="maxPoolSize" value="${connection_pools.max_pool_size}" />
		<!--最大空闲时间,N秒内未使用则连接被丢弃。若为0则永不丢弃。-->
		<property name="maxIdleTime" value="${connection_pools.max_idle_time}" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数 -->
		<property name="acquireIncrement" value="${connection_pools.acquire_increment}" />
		<!--当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException,如设为0则无限期等待。单位毫秒。 -->
		<property name="checkoutTimeout" value="${connection_pools.checkout_timeout}" />
	</bean>
	
	<bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!--<property name="driverClassName" value="${jdbc.driver}" />-->
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="5" />
		<property name="minIdle" value="5" />
		<property name="maxActive" value="20" />


		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		 <!-- 验证连接有效与否的SQL，不同的数据配置不同 --> 
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
	
	</bean>
	
	
	<!--jpa持久化-->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource1" />
		<property name="persistenceXmlLocation" value="classpath*:/persistence.xml" />
		<property name="persistenceUnitName" value="persistenceUnit" />
		 <!-- <property name="packagesToScan" value="com.programs.entity" /> -->
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="true" />
				<property name="generateDdl" value="true" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.connection.isolation">2</prop>
				<prop key="javax.persistence.validation.mode">none</prop>
				<prop key="hibernate.search.default.directory_provider">org.hibernate.search.store.FSDirectoryProvider</prop>
				<prop key="hibernate.search.default.indexBase">${java.io.tmpdir}/${system.project_name}/index</prop>
			</props>
		</property>
	</bean>
	
	<!--通过@Transactional注解就可以引入事务管理功能。-->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager" />

	<cache:annotation-driven cache-manager="cacheManager" /> 
	
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass" value="java.lang.System" />
		<property name="targetMethod" value="setProperty" />
		<property name="arguments">
			<list>
				<value>system.project_name</value>
				<value>${system.project_name}</value>
			</list>
		</property>
	</bean>
	
	<!--缓存配置--> 
	<bean id="ehCacheManager"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:/ehcache.xml" />
		<property name="shared" value="true" />
	</bean> 
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehCacheManager" />
	</bean>
	<!-- 使用注解方式定义缓存 -->
	<cache:annotation-driven cache-manager="cacheManager" />
	
	
	<!-- 抽取本地资源，转为国际化 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="cacheSeconds" value="${message.cache_seconds}" />
		<property name="useCodeAsDefaultMessage" value="true" />
		<property name="basenames">
			<list>
				<value>${message.admin_path}</value>
			</list>
		</property>
	</bean>
	<!-- 国际化的解析器 -->
	<!-- 获取本地信息（这里是ch（简体中文）） -->
	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.FixedLocaleResolver">
		<property name="defaultLocale" value="${locale}" />
	</bean>
	<!--验证码-->
	<bean id="imageCaptchaService" class="com.octo.captcha.service.image.DefaultManageableImageCaptchaService">
		<property name="captchaEngine">
			<bean class="framework.XEngineCaptcha" />
		</property>
		<property name="minGuarantedStorageDelayInSeconds" value="3600" />
	</bean>
	
	<!-- 邮件配置 -->
	
	
	
	
</beans>